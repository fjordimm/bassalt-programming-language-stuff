
class List
{
	private int count;
	private lptr<Node> head;
	private wlptr<Node> tail;

	public this()
	{
		this.count == 0;
		this.head = null;
		this.tail = null;
	}

	public append(int val)
	{
		lptr<Node> newNode = newlptr Node{ Node(data=val, prev=null, next=null) };

		if this.count == 0
		{
			this.head = cede newNode;
			this.tail = this.head;
		}
		else if this.count == 1
		{
			newNode@.prev = this.head;

			this.head@.next = cede newNode;
			this.tail = this.head@.next;
		}
		else
		{
			newNode@.prev = this.tail;

			this.tail@.next = cede newNode;
			this.tail = this.tail@.next;
		}

		this.count++;
	}

	public removeLast()
	{
		this.tail@.prev@.next = null;
		this.count--;
	}

	public printFrontToBack()
	{
		println$(f"List ({this.count}) front-to-back:");
		
		wlptr<Node> n = this.head;
		while n != null
		{
			print$("  ");
			PrintNode(n);
			println$();
			
			n = n@.next;
		}
	}

	public printBackToFront()
	{
		println$(f"List ({this.count}) back-to-front:");
		
		wlptr<Node> n = this.tail;
		while n != null
		{
			print$("  ");
			PrintNode(n);
			println$();
			
			n = n@.prev;
		}
	}
},
with module
{
	private struct Node
	{
		int data;
		wlptr<Node> prev;
		lptr<Node> next;
	}

	private void PrintNode(Node!& node)
	{
		print$("Node(");
		print$(node@.prev == null ? "o " : "* ");
		print$(node@.data);
		print$(node@.next == null ? " o" : " *");
		print$(")");
	}
}

void Main()
{
	println$("=== Starting Program ===");
	println$();

	List a => ();
	
	a.append(1);
	a.printFrontToBack();
	a.printBackToFront();
	println$();
	
	a.append(2);
	a.printFrontToBack();
	a.printBackToFront();
	println$();

	a.append(3);
	a.printFrontToBack();
	a.printBackToFront();
	println$();

	List b => ();
	b.append(11);
	b.append(12);
	b.append(13);
	b.append(14);
	b.append(15);
	b.printFrontToBack();
	b.printBackToFront();
	println$();

	println$("=== Ending Program ===");
}
