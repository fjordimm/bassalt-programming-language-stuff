
//////////////////////////////

///// Passing By Reference /////

/*
Note: passing by reference is not to be confused with reference pointers (represented by `&`).
Although reference pointers hold the address of something, they are still being passed by value.

`int& var`    --> "The declaration of a variable 'var' with type 'reference pointer to int'."
`var&`        --> "The address of a variable 'var'."
`var@ = 1`    --> "Writing the value '1' to the memory location stored by 'var'."
`ref int var` --> "The declaration of a variable 'var' with type 'int' that is passed by reference."
`ref var`     --> "Passing a variable 'var' by reference."
`var = 1`     --> "Writing the value '1' to something aliased by 'var'."

While something like `int&& var` is legal, something like `ref ref int var` is illegal and wouldn't make sense.
*/

/*
Summary of all types of references:

 `ref` OR `ref{initialized}`
    - references:          lvalue
	- readable:            yes
	- writable:            yes
	- must be written to:  no

 `ref{uninitialized}`
    - references:          lvalue
	- readable:            no (until written to)
	- writable:            yes
	- must be written to:  no

 `outref` OR `outref{uninitialized}`
    - references:          lvalue
	- readable:            no (until written to)
	- writable:            yes
	- must be written to:  yes

 `outref{initialized}`
    - references:          lvalue
	- readable:            yes
	- writable:            yes
	- must be written to:  yes

 `inref`
    - references:          lvalue or rvalue
	- readable:            yes
	- writable:            no
	- must be written to:  no
*/

void Main()
{
	int a = 5;
	DoubleMe(ref a);
	DoubleMeWrapper(ref a);
	
	DoubleMe(63); // Illegal. The input	must be an lvalue passed by reference.
	DoubleMe(a); // Illegal. The input	must be an lvalue passed by reference.
	DoubleMe(ref 63); // Illegal. You cannot pass literals by reference (unless with `inref`).

	int bM = 9;
	int! bI = 9;
	PrintMe1(ref bM!);
	PrintMe1(ref bI);

	int c = 7;
	PrintMe2(inref c);
	PrintMe2(inref 3);

	int d;
	InitializeMe(outref d);
	InitializeMe(int d2 outref); // You can also declare variables in the function call (but see below)

	/* For declaration outrefs, here is a good convention: */
	/* 1) Declare the function with all the outref parameters at the end. */
	/* 2) Format the function call like so... */
	MakeFibonacciSequence(0, 30, // regular parameters go on one line like normal
		int[] result outref; // declaration outrefs go on separate lines
	);

	int e;
	Func6(ref e);
	// Since Func6 has no obligation to assign a value through reference, `e` is still treated as uninitialized in this scope and cannot be read from yet.

	int f = 1;
	Func6(ref f); // Since `f` is initialized, the expression `ref f` is an initialized referral. It will be treated as an uninitialized referral in the function, however.

	int g;
	PrintMe1(ref g); // Illegal. Since `g` is uninitialized, the expression `reg g` is an uninitialized referral, which cannot be treated as an initialized referral.

	int h = 21;
	Func7(outref h);
	InitializeMe(outref h);

	int i = 21;
	Func7(outref i); // Illegal
	InitializeMe(outref i);
}

void DoubleMe(ref int v)
{
	v = v * 2;
}

void DoubleMeWrapper(ref int v)
{
	// `ref int` is not a type like `int&` is; it is just saying that the parameter is given by reference...
	// ...so, you still have to be explicit when passing it by reference to something else
	DoubleMe(ref v);
}

void PrintMe1(ref int! v)
{
	// Cannot write to `v`

	stdout.println(v);
}

// `v` can be an lvalue or an rvalue
void PrintMe2(inref int v)
{
	// Cannot write to `v`

	stdout.println(v);
}

// Whatever you pass into `v` does not need to be initialized
void InitializeMe(outref int v)
{
	// Cannot read the value of `v` before assigning it

	v = 13;

	// By the end of the function, `v` must be assigned to something
}

void Func6(ref{uninitialized} int v)
{
	// Cannot read the value of `v` before assigning it.

	// When passing it by reference again, it can only be passed to uninitialized references (at least before `v` is assigned anything).
	ref{uninitialized} int temp1 = ref v;

	v = 11;

	// Now it can be read (`v` is now effectively `ref int` instead of `ref{uninitialized} int`).
	stdout.println(v);

	// And, now it can be passed to uninitialized or initialized references.
	ref{uninitialized} int temp2 = ref v;
	ref int temp3 = ref v;
}

void Func7(outref{initialized} int v)
{
	stdout.println(v);

	// When passing it by reference again, it can be passed to both initialized and uninitialized refs.
	ref temp1 = ref v;
	ref{uninitialized} temp2 = ref v;

	v = 11;

	// It still holds that by the end of the function, `v` must be assigned to something
}

//////////////////////////////
