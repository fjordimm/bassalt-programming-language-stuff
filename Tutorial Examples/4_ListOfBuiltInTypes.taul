
////////////////////////////////////////////////////////////

///// List of Built-in Types /////

// Primitive Types
bool var = false;			// 8 bits	// boolean
char8 var = 0_c8;			// 8 bits	// integer	// unsigned
char var = 0_c;				// 16 bits	// integer	// unsigned
char32 var = 0_c32;			// 32 bits	// integer	// unsigned
sbyte var = 0_sb;			// 8 bits	// integer	// signed
short var = 0_s;			// 16 bits	// integer	// signed
int var = 0_i;				// 32 bits	// integer	// signed
long var = 0_l;				// 64 bits	// integer	// signed
byte var = 0_b;				// 8 bits	// integer	// unsigned
ushort var = 0_us;			// 16 bits	// integer	// unsigned
uint var = 0_ui;			// 32 bits	// integer	// unsigned
ulong var = 0_ul;			// 64 bits	// integer	// unsigned
float var = 0_f;			// 32 bits	// floating-point
double var = 0_d;			// 64 bits	// floating-point

// Built-in Passable Classes
int128 var = 0_ii;			// 128 bits	// integer	// signed
uint128 var = 0_uii;		// 128 bits	// integer	// unsigned
int256 var = 0_iii;			// 256 bits	// integer	// signed
uint256 var = 0_uiii;		// 256 bits	// integer	// unsigned
rgba var = 0_r;				// 32 bits	// integer	// unsigned		(Not meant to be used as an integer. See '42_BuiltInStructs')
datetime var = 0_t;			// 64 bits	// integer	// unsigned		(Not meant to be used as an integer. See '42_BuiltInStructs')

// Built-in Non-passable Classes
string var === "hello";

////////////////////////////////////////////////////////////

///// C Primitives /////

// To use C primitives, use the `$` syntax
$int var = 0;

// For types that requires multiple words, just concatenate with a `$` in between
$unsigned$short var = 0;
$long$long var = 0;
$long$double var = 0;

// You can also use any types defined in the standard C libraries
$size_t var = 0;
$wchar_t var = 0;
$uintptr_t var = 0;

////////////////////////////////////////////////////////////