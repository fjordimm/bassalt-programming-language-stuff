
//////////////////////////////

///// Cheat Sheet /////

/*
 int*					raw pointer type
 int&					reference pointer type
 int^					unique pointer type
 optr<int>				observable pointer type
 woptr<int>				weak observable (observer) pointer type
 sptr<int>				shared pointer type
 wsptr<int>				weak shared pointer type
 jptr<int, 1>			joint pointer type
 wjptr<0, int>			weak joint pointer type
 gptr<int>				garbage-collected pointer type

 var&					address-of operator, returns a reference pointer
 var@					dereference operator
 new int{1}				new operator, returns a unique pointer
 snew int{1}			newsptr operator, creates and returns a shared pointer
 rnew int{1}			rnew operator, returns a raw pointer
 rrealloc var			rrealloc operator, returns a raw pointer
 rfree var				rfree operator, frees the referent of 'var'
*/

//////////////////////////////

///// Raw Pointers /////

void Main()
{
	/* Raw pointers can point to anything on the stack or heap. */
	/* They will not automatically free themselves, so you must free them manually when needed using 'rfree'. */
	/* Therefore, raw pointers must be used in an unsafe context. */
	/* Mutability/face rules still apply to raw pointers, however. */

	unsafe
	{
		int* rp1 = rnew int{7};
		stdout.println(rp1@); // Prints: 7
		rp1@ = 8;
		stdout.println(rp1@); // Prints: 8
		rfree rp1;

		int* rp2 = rnew int{3};
		int* rp3 = rnew int{3};
		stdout.println(rp2 == rp3); // Prints: false
		stdout.println(rp2@ == rp3@); // Prints: true
		rfree rp2;
		rfree rp3;

		int* rp4 = rnew int{9};
		stdout.println(rp4@); // Prints: 9
		int* rp5 = rp4;
		stdout.println(rp5@); // Prints: 9
		stdout.println(rp4@); // Prints: 9
		stdout.println(rp4 == null); // Prints: false
		rfree rp4;
		stdout.println(rp5 == null); // Prints: false
		stdout.println(rp4@); // Undefined behavior, dereferencing a dangling pointer
		stdout.println(rp5@); // Undefined behavior, dereferencing a dangling pointer

		///////////

		/* Raw pointers can also be used like reference pointers */

		int a = 1;
		int b = 2;
		int! c = 3;

		int* rp6 = (*)a&;
		stdout.println(rp6@);
		rp6@ += 9;
		int!* rp7 = (*)c&!;
		stdout.println(rp7@);

		///////////

		/* Raw pointers can also be set to any other pointer type */

		int& r1 = a&;
		int* rp8 = (*)r1;

		int^ up1 = new int{7};
		int* rp9 = (*)up1;
	}
}

//////////////////////////////

///// Reference Pointers /////

void Main()
{
	int a = 1;
	int b = 2;
	int! c = 3;

	int& r1 = a&;
	stdout.println(r1@); // Prints: 1
	a = 10;
	stdout.println(r1@); // Prints: 10

	int& r2 = a&;
	r2@ = 11; // a is now 11.
	r2 = b&;
	r2@ = 22; // b is now 22.

	r2 = 8; // Illegal, the value of a reference must be either null or a valid memory address.
	r2++; // Illegal, the value of a reference must be either null or a valid memory address.

	int&! r3 = a&;
	r3@ = 111; // a is now 111.
	r3 = ref b; // Illegal, r3 is fixed.

	int!& r4 = a&!;
	r4@ = 1111; // Illegal, r4 is a reference to a fixed int, so r4 can only read from what its pointing to.
	stdout.println(r4@);
	r4 = b&!; // The value of r4 can still be changed.
	stdout.println(r4@);

	// Think of fixedness as polymorphism. Unfixed types (e.g. int) are subsets of fixed types (e.g. int!).
	int!& r5 = a&!;
	int!& r6 = c&!;
	int& r6 = a&;
	int& r7 = c&!; // Illegal, r7 can mutate its referent, so it cannot point to a fixed type.

	int!&! r8 = a&!;
	stdout.println(r8@);
	r8@ = 100; // Illegal, r8 points to a fixed type.
	r8 = b&!; // Illegal, r8 is fixed.

	///////////

	int!&! r9;
	// ...can be rewritten as...
	int&!! r10;
	// You can call this variable immutable, since the '!!' guarantees fixedness recursively, as shown below...
	
	int!&!&!&!&!&! r11;
	// ...can be rewritten as...
	int&&&&&!! r12;

	///////////

	int& r13 = null;
	stdout.println(r13@); // Runtime error.
	r13@ = 1000; // Runtime error.

	int& r14 = a&
	int& r15 = a&;
	int& r16 = b&;
	int& r17 = null;
	stdout.println(r14 == a&); // Prints: true
	stdout.println(r14 == r15); // Prints: true
	stdout.println(r14 == r16); // Prints: false
	stdout.println(r17 == null);
	r14 = null;
	stdout.println(r14 == r17); // Prints: true
}

//////////////////////////////

///// Unique Pointers /////

void Main()
{
	/* Unique pointers point to objects on the heap. */
	/* When the unique pointer variable goes out of scope, its referent is automatically freed. */
	/* Each object on the heap can only be pointed to by one unique pointer at a time. */

	///////////

	int^ up1 = new int{7};
	stdout.println(up1@); // Prints: 7
	up1@ = 8;
	stdout.println(up1@); // Prints: 8

	int^ up2 = new int{3};
	int^ up3 = new int{3};
	stdout.println(up2 == up3); // Prints: false
	stdout.println(up2@ == up3@); // Prints: true

	int^ up4 = new int{9};
	stdout.println(up4@); // Prints: 9
	int^ up5 = up4; // Illegal.
	int^ up5 = cede up4; // up4 has now given ownership of the object to up5.
	stdout.println(up5@); // Prints: 9
	stdout.println(up4@); // Runtime error (null pointer).
	stdout.println(up4 == null); // Prints: true

	///////////

	// The same thing applies about '!!' as for reference pointers.
	int!^! up6;
	// ...can be rewritten as...
	int^!! up7;
	// ...and...
	int!^!^!^!^!^! up8;
	// ...can be rewritten as...
	int^^^^^!! up9;
}

//////////////////////////////

///// Observable Pointers /////

void Main()
{
	/* Observable pointers work like C++'s std::shared_ptr and std::weak_ptr, but only allow one owner. */
	/* See https://www.codeproject.com/Articles/5316026/ptr-to-unique-T-extending-std-unique-ptr-to-suppor. */
	/* This means there is comparable runtime and memory overhead to shared pointers, but cycles are not possible since it enforces ownership semantics. */

	optr<int> op1 = onew int{7};
	stdout.println(op1@); // Prints: 7
	op1@ = 8;
	stdout.println(op1@); // Prints: 8

	optr<int> op2 = onew int{9};
	stdout.println(op2@); // Prints: 9
	optr<int> op3 = op2; // Illegal.
	optr<int> op3 = cede op2; // op2 has now given ownership of the object to op3.
	stdout.println(op3@); // Prints: 9
	stdout.println(op2@); // Runtime error (null pointer).
	stdout.println(op2 == null); // Prints: true

	optr<int> op4 = onew int{11};
	stdout.println(op4@); // Prints: 11
	woptr<int> wp1 = woptr(op4);
	wp1@ = 13;
	stdout.println(op4@); // Prints: 13
	stdout.println(wp1@); // Prints: 13
}

//////////////////////////////

///// Shared Pointers /////

void Main()
{
	/* They work the same as C++'s std::shared_ptr and std::weak_ptr. */
	/* This means there is some runtime and memory overhead. Also, cycles are possible leading to memory leaks. */

	sptr<int> sp1 = snew int{7};
	stdout.println(sp1@); // Prints: 7
	sp1@ = 8;
	stdout.println(sp1@); // Prints: 8

	sptr<int> sp2 = sptr(sp1);
	sp2@ = 9;
	stdout.println(sp1@); // Prints: 9

	///////////

	wsptr<int> wp1;

	{
		sptr<int> spA;

		{
			sptr<int> spB = snew int{3};
			spA = sptr(spB);
			wp1 = wsptr(spB);

			stdout.println(spB); // Prints: 3
			stdout.println(spA); // Prints: 3
			stdout.println(wp1); // Prints: 3
		}

		// spB went out of scope, but spA is still one of the owners
		stdout.println(spA); // Prints: 3
		stdout.println(wp1); // Prints: 3
	}

	// now no one is the owner
	stdout.println(wp1); // Runtime error
}

//////////////////////////////

///// Joint Pointers /////

void Main()
{
	/* A joint pointer works the same way as a unique pointer, but it allows additional non-owning (weak) pointers. */
	/* Behind the scenes, each object contains pointers to all of the weak pointers that point to it, so that on destruction, they will be invalidated. */
	/* Instead of objects having a dynamic list of weak pointers, they have a fixed number of links, which corresponds to the 2nd template argument of jptr. */
	/* If no 2nd template argument is given, the default is 1. */

	jptr<int> jp1 = jnew int{7};
	stdout.println(jp1@); // Prints: 7
	jp1@ = 8;
	stdout.println(jp1@); // Prints: 8

	jptr<int> jp2 = jnew int{9};
	stdout.println(jp2@); // Prints: 9
	jptr<int> jp3 = jp2; // Illegal.
	jptr<int> jp3 = cede jp2; // jp2 has now given ownership of the object to jp3.
	stdout.println(jp3@); // Prints: 9
	stdout.println(jp2@); // Runtime error (null pointer).
	stdout.println(jp2 == null); // Prints: true

	jptr<int> jp4 = jnew int{11};
	stdout.println(jp4@); // Prints: 11
	wjptr<int> wp1 = wjptr(jp4);
	wp1@ = 13;
	stdout.println(jp4@); // Prints: 13
	stdout.println(wp1@); // Prints: 13

	// With the fixed number of links, each weak pointer must be indexed.
	jptr<int, 3> jp5 = jnew<3> int{15};
	wjptr<0, int> wp2 = wjptr<0>(jp5);
	wjptr<1, int> wp3 = wjptr<1>(jp5);
	wjptr<2, int> wp4 = wjptr<2>(jp5);
}

//////////////////////////////

// TODO: gptr (garbage-collected pointer)
// TODO: optr (observable pointer)

// TODO: conversions between pointer types; explicit casting from one pointer type to another (e.g. 'int* rp = (*)someUniquePtr' and that is actually a shortcut for 'int* rp = (int*)someUniquePtr')
// TODO: combining them (e.g. int^*)
// TODO: equality between them
// TODO: new Point{Point::Origin} vs new Point(0, 0)
// TODO: shared references can only work if they don't have a higher scope than what they point to
// TODO: rrealloc keyword
