
//////////////////////////////

///// Basics of Lifetimes /////

// Rust code:

/*
fn foo<'a, 'b>(x: &'a i32, y: &'b i32) -> &'a i32 {
	x
}

fn main() {
	let x = 12;
	let z: &i32 = {
		let y = 42;
		foo(&x, &y)
	};
	println!("{z}");
}
*/

// Equivalent Bassalt code:
/* (except everything that was immutable is now mutable for more concise syntax) */

int&{L} Foo(int&{L} x, int&{M} y)
{
	return x;
}

void Main()
{
	int x = 12;
	int& z = inline
	{
		int y = 42;
		Foo(x&, y&);
	};
	stdout.println(f"{z@}");
}

//////////////////////////////

///// The 'owner' Keyword /////
/* and how to make a memory-safe doubly linked list with no overhead */

int&{L : owner} var;

struct Thing
{
	float a;
}

void Main()
{

}

///////////

struct Node
{
	float data;
	Node^ next;
	Node&{owner} prev;
}

//////////////////////////////
