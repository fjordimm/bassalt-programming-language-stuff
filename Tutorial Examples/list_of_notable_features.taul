
/*

Notable Features:
 - Tries not to force any programming paradigms
 - The concept of passability (unit and non-unit classes)
 - The concept of faces (including the mutable face and immutable face for primitive types, and the mutable private face, immutable private face, mutable public face, and immutable public face for classes)
 - Explicit immutability
 - Explicit ceding for unique pointers
 - Labelled loops that can be broken out of by name, and infinite loops called 'loop'
 - The unique pointer stuff that Rust does well, but it's better than Rust because Rust is not very explicit
 - The dereference operator comes after, which makes you use less parenthesis. Examples:
    - a@.b instead of (*a).b
	- a.b@ instead of *(a.b)
 - Clearness, especially that '=' always means direct assignment, and that there is explicit referencing/dereferencing
 - The built-in pointers types (&, ^, *, sptr, ptrw, lptr, and lptrw) (reference pointer, unique pointer, raw pointer, shared pointer, weak shared pointer, lock-and-key pointer, and weak lock-and-key pointer)
 - Lock-and-key pointers, and two types of them (primary/owning and secondary/weak)
 - Better mutability control than Rust, but also it is much less of a pain than Rust is
 - Avoids getter and setter methods so that you can have direct access to fields of fields, and it avoids the badness of mutable Properties in C# but still has the concise syntax / access control
 - Don't have to worry about values being implicitly casted, or about always writing the 'f' suffix, or '.0' suffix, etc.

*/

