
/*

Notable Features:
 - RAII
 - Tries not to force any programming paradigms
 - The concept of passability (passable and non-passable classes)
 - The concept of faces (including the mutable face and immutable face for primitive types, and the mutable private face, immutable private face, mutable public face, and immutable public face for classes)
 - Explicit immutability; more precise mutability control
 - Built-in pointer types
    - Unique pointers
 - Better syntax and possibilities for non-dynamic classes and arrays

Minor Notable Features:
 - Labelled loops that can be broken out of by name, and simple infinite loops with keyword 'loop'
 - Explicit ceding for unique pointers
 - The dereference operator comes after, which makes you use less parenthesis. Examples:
    - a@.b instead of (*a).b
	- a.b@ instead of *(a.b)
 - Clearness, especially that '=' always means direct assignment, and that there is explicit referencing/dereferencing
 - Avoids getter and setter methods so that you can have direct access to fields of fields, while avoiding the badness of mutable Properties in C# but still has the concise syntax / access control
 - Don't have to worry about values being implicitly casted, or about always writing the 'f' suffix, or '.0' suffix, etc.
 - Tuple syntax

*/
