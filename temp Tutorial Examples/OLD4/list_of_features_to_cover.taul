
/*

Features to Cover:
 - if var == 12 or 18 {...}
 - tuples
 - arrays
 - nonstaticness in generics using the '?' symbol in the '<>' (or maybe '*', or maybe just '<>')
 - normal reference, nonmodifier reference, agent reference
 - naming conventions
    - pascal case should always be used for consts, even in non-static scopes
 - casting (direct casting vs converting types? also bitcasting?)
 - optional parameters
 - generics in functions
 - native functions
 - regex
 - enums
 - flag enums (e.g. DoThing(ThingFlags.A | ThingFlags.B | ThingFlags.C)). Although this is just enums and bitwise operators, add something more to explicitly mark it as a flag and/or make it so you don't have to manually type 1, 2, 4, 8, 16, etc.
    - do it with the preprocessor directives #flagvalues and #endflagvalues
 - passability
 - something like C#'s 'out' keyword. It should look slightly different than a plain reference.
 - string length in chars versus string length in actual characters (also how will strings work with char8 vs char vs char32)
 - a named 'loop' like in Rust.
 - methods should be marked as a mutator or not
 - anonymous structs
 - marking nonprimitive arguments as Type>>imm, and when you pass it it implicitly does the 'via'
 - faces
 - there are four faces every class has: 1) the mutable public face, 2) the immutable public face, 3) the mutable private face, 4) the immutable private face.
 - property modifiers for boxes (e.g. ^List x {public get ref};) and with faces (e.g. ^List x {public get ref via imm, get ref via FReadOnly};)
    - with structs you can actually cede boxed fields. With classes, if you really wanted the option to do that then you would have to use the property modifier: {public cede}, and then the client would do 'cede obj.someField'. Also {public get} is meaningless/illegal for boxed fields.
 - using the operator '<<' for printing to stdout, stderr, file streams, and string builders.
 - the equivalent of overriding 'to_string()'. But actually instead of returning a string, its like writing to a stream.
 - the equivalent of 'out' in C#.
 - how the '^' and '&' pointers implicitly cast to each other.
 - bitfields
 - to do something like protected inheritence in C++, you can override the access modifier of parent members by overriding the default face, eg. 'face {...}'.
 - annotations (equivalent of @LoremIpsum in Java or [LoremIpsum] in C#).
 - IIter or whatever you decide to call it (equivalent of IEnumerable in C# or Iterable in Java).
 - lambda functions.

Maybe:
 - nullability with '?'
 - extension methods (maybe leave this out; remember simple is better).
 - '->' as a shortcut for '@.'
 - a shortcut for 'cede new int[] {1, 2, 3}' would be just {1, 2, 3}.

*/

